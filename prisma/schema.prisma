generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Model - provided by Supabase

// Enums for conversation branching
enum ChatMode {
  chat
  mind
}

enum NodeType {
  conversation
  branching_point
  insight
}

// Chat model - represents a conversation session
model Chat {
  id              String   @id @default(cuid())
  userId          String   @map("user_id") // References Supabase auth.users.id
  title           String? // Optional title for the chat
  shareId         String?  @unique @map("share_id") // For shareable chat links
  mode            ChatMode @default(chat) // Track interaction mode
  isCollaborative Boolean  @default(false) @map("is_collaborative") // For real-time collab
  templateId      String?  @map("template_id") // Reference to conversation templates
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  messages              Message[]
  collaborationSessions CollaborationSession[]
  conversationInsights  ConversationInsight[]
  template              ConversationTemplate?  @relation(fields: [templateId], references: [id])

  // Indexes for better query performance
  @@index([userId]) // For getUserChats() query
  @@index([userId, updatedAt(sort: Desc)]) // For getUserChats() with ordering
  @@index([id, userId]) // For getChatWithMessages() compound lookup
  @@index([mode]) // For filtering by chat mode
  @@index([templateId]) // For template-based queries
  @@map("chats")
}

// Message model - represents individual messages in a chat with branching support
model Message {
  id           String    @id @default(cuid())
  chatId       String    @map("chat_id")
  parentId     String?   @map("parent_id") // For conversation branching
  branchName   String?   @map("branch_name") // User-defined branch labels
  role         String // 'user' or 'assistant'
  content      String // The message content
  model        String? // Optional: which LLM model was used for assistant messages
  attachments  Json      @default("[]") // Store attachments as JSON array
  xPosition    Float     @default(0) @map("x_position") // Mind map coordinates
  yPosition    Float     @default(0) @map("y_position") // Mind map coordinates
  nodeType     NodeType  @default(conversation) @map("node_type") // Type of node
  isCollapsed  Boolean   @default(false) @map("is_collapsed") // For mind map UI state
  isLocked     Boolean   @default(false) @map("is_locked") // For preventing concurrent edits
  lastEditedBy String?   @map("last_edited_by") // User ID who last edited (for collaboration)
  editedAt     DateTime? @map("edited_at") // When last edited (for collaboration)
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  chat                 Chat                  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  parent               Message?              @relation("MessageBranching", fields: [parentId], references: [id])
  children             Message[]             @relation("MessageBranching")
  conversationInsights ConversationInsight[]

  // Indexes for better query performance
  @@index([chatId]) // For foreign key relationship
  @@index([chatId, createdAt]) // For getChatWithMessages() with message ordering
  @@index([createdAt(sort: Desc)]) // For getting latest messages in getUserChats()
  @@index([parentId]) // For parent lookups in conversation trees
  @@index([model]) // For model-specific queries
  @@index([nodeType]) // For filtering by node type
  @@index([lastEditedBy]) // For tracking collaborative edits
  @@index([isLocked]) // For locked message queries
  @@map("messages")
}

// Usage Log model - tracks model usage for analytics (no user content stored)
model UsageLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id") // References Supabase auth.users.id
  model     String // The AI model used (e.g., "openai/gpt-4o-mini")
  chatId    String?  @map("chat_id") // Optional: link to specific chat session
  createdAt DateTime @default(now()) @map("created_at")

  // Indexes for better query performance
  @@index([userId]) // For user-specific usage queries
  @@index([model]) // For model-specific analytics
  @@index([createdAt]) // For time-based queries
  @@index([userId, createdAt]) // For user usage over time
  @@index([userId, model]) // For user model preferences
  @@map("usage_logs")
}

// API Key model - stores encrypted user API keys for BYOK functionality
model ApiKey {
  id           String    @id @default(cuid())
  userId       String    @map("user_id") // References Supabase auth.users.id
  provider     String // The AI provider (e.g., "openrouter", "openai", "anthropic")
  encryptedKey String    @map("encrypted_key") // AES-256 encrypted API key
  keyName      String    @default("Default") @map("key_name") // User-friendly name for the key
  isActive     Boolean   @default(true) @map("is_active") // Whether this key should be used
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastUsedAt   DateTime? @map("last_used_at") // Track when key was last used

  @@unique([userId, provider, keyName]) // Prevent duplicate key names per provider per user
  // Indexes for better query performance
  @@index([userId]) // For user-specific key queries
  @@index([userId, provider]) // For getting user keys by provider
  @@index([userId, isActive]) // For getting active keys
  @@map("api_keys")
}

// Conversation Templates for Mind Mode
model ConversationTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  creatorId   String   @map("creator_id") // References Supabase auth.users.id
  structure   Json // Template conversation tree structure
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  chats Chat[]

  // Indexes for better query performance
  @@index([creatorId]) // For creator-specific queries
  @@index([isPublic]) // For public template discovery
  @@index([createdAt(sort: Desc)]) // For latest templates
  @@map("conversation_templates")
}

// Real-time Collaboration Sessions
model CollaborationSession {
  id              String   @id @default(cuid())
  chatId          String   @map("chat_id")
  activeSince     DateTime @default(now()) @map("active_since")
  lastActivity    DateTime @default(now()) @map("last_activity")
  maxParticipants Int?     @map("max_participants") // Optional participant limit
  settings        Json?    @default("{}") // Collaboration preferences (permissions, etc.)

  // Relations
  chat         Chat                 @relation(fields: [chatId], references: [id], onDelete: Cascade)
  participants SessionParticipant[]

  // Indexes for better query performance
  @@index([chatId]) // For chat-specific sessions
  @@index([lastActivity(sort: Desc)]) // For active session queries
  @@map("collaboration_sessions")
}

// Participant roles for collaboration
enum ParticipantRole {
  owner
  collaborator
  viewer
}

// Join table for collaboration session participants
model SessionParticipant {
  id           String          @id @default(cuid())
  sessionId    String          @map("session_id")
  userId       String          @map("user_id") // References Supabase auth.users.id
  role         ParticipantRole @default(collaborator) // Participant permissions
  joinedAt     DateTime        @default(now()) @map("joined_at")
  lastActivity DateTime        @default(now()) @map("last_activity") // Track individual activity

  // Relations
  session CollaborationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Ensure a user can only participate once per session
  @@unique([sessionId, userId])
  // Indexes for better query performance
  @@index([sessionId]) // For session-specific participant queries
  @@index([userId]) // For user-specific session queries
  @@index([joinedAt(sort: Desc)]) // For tracking when users joined
  @@index([lastActivity(sort: Desc)]) // For tracking participant activity
  @@index([role]) // For filtering by participant role
  @@map("session_participants")
}

// Conversation Insights and Analytics
model ConversationInsight {
  id          String   @id @default(cuid())
  chatId      String   @map("chat_id")
  messageId   String   @map("message_id")
  insightType String   @map("insight_type")
  content     String
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  // Indexes for better query performance
  @@index([chatId]) // For chat-specific insights
  @@index([messageId]) // For message-specific insights
  @@index([insightType]) // For filtering by insight type
  @@index([createdAt(sort: Desc)]) // For latest insights
  @@map("conversation_insights")
}

// User Feedback model
model Feedback {
  id        String   @id @default(cuid())
  userId    String   @map("user_id") // References Supabase auth.users.id
  message   String // Feedback content
  type      String   @default("general") // Type of feedback (bug, feature, general, etc.)
  status    String   @default("open") // Status (open, in_progress, resolved, closed)
  priority  String   @default("medium") // Priority (low, medium, high, critical)
  userAgent String?  @map("user_agent") // Browser/device info
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Indexes for better query performance
  @@index([userId]) // For user-specific feedback queries
  @@index([type]) // For filtering by feedback type
  @@index([status]) // For filtering by feedback status
  @@index([priority]) // For filtering by priority
  @@index([createdAt(sort: Desc)]) // For latest feedback
  @@map("feedback")
}
